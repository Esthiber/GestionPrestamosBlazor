@page "/Prestamo/Edit/{PrestamoId:int}"

@inject PrestamosService prestamosService
@inject DeudoresService deudoresService
@inject CuotasService cuotasService
@* @inject ToastService toastService *@
@inject NavigationManager navigationManager

@*HTML*@
<PageTitle>Modificar</PageTitle>
<EditForm Model="Prestamo" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Prestamo</h5>
            </div>

            <div class="card-body">
                @*Deudor*@
                <div class="mb-3">
                    <label class="form-label"><strong>Deudor</strong></label>
                    <InputSelect class="form-control" @bind-Value="Prestamo.DeudorId">
                        <option value="" selected disabled>Elija una opci&oacute;n</option>
                        @foreach (var deudor in ListaDeudores)
                        {
                            <option value="@deudor.DeudorId">@deudor.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="(() => Prestamo.Deudor)" />
                </div>
                @*Concepto*@
                <div class="mb-3">
                    <label class="form-label"><strong>Concepto</strong></label>
                    <InputText class="form-control" @bind-Value="Prestamo.Concepto"></InputText>
                    <ValidationMessage For="(() => Prestamo.Concepto)" />
                </div>

                @*Monto*@
                <div class="mb-3">
                    <label class="form-label"><strong>Monto</strong></label>
                    <InputNumber class="form-control" @bind-Value="Prestamo.Monto"></InputNumber>
                    <ValidationMessage For="(() => Prestamo.Monto)" />
                </div>


                @*Cuotas*@
                <div class="mb-3">
                    <label class="form-label"><strong>Cuotas</strong></label>
                    <InputNumber class="form-control" @bind-Value="CuotasDetalle.CuotasNo" min="1" max="100"></InputNumber>
                    @if (Prestamo.Monto >= 1 && CuotasDetalle.CuotasNo >= 1)
                    {
                        <div class="btn btn-primary" @onclick="CrearCuotas">
                            <span class=" bi bi-plus-square mt-3"></span>Crear Cuotas
                        </div>
                    }
                </div>

                @* Detalles de las cuotas *@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles de cuotas</h5>
                    <hr />
                    <table class="table table-light">
                        <thead class="table table-striped">
                            <tr class="text-center">
                                <th>CuotaNo</th>
                                <th>Fecha</th>
                                <th>Valor</th>
                                <th>Balance</th>
                            </tr>
                        </thead>
                        <tbody class="text-center">
                            @foreach (var cuota in ListaCuotas)
                            {
                                <tr>
                                    <th>@cuota.CuotaNo</th>
                                    <th>@cuota.Fecha</th>
                                    <th>@cuota.Valor.ToString("n2")</th>
                                    <th>@cuota.Balance.ToString("n2")</th>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                </div>

            </div>

            @*footer*@
            <div class="card-footer text-center mt-2">
                <a href="/Prestamo/Index" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="button" class="btn btn-primary bi bi-floppy" @onclick="Modificar"> Modificar</button>
                <button type="button" class="btn btn-danger bi bi-trash" @onclick="Eliminar"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrestamoId { get; set; }

    public Prestamos Prestamo { get; set; } = new Prestamos();
    public string Mensaje { get; set; } = string.Empty;
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();
    public List<Cuotas> ListaCuotas { get; set; } = new();
    public CuotasDetalle CuotasDetalle { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Prestamo = await prestamosService.Buscar(PrestamoId);
        ListaDeudores = await deudoresService.Listar(d => d.DeudorId > 0);
        CuotasDetalle = await cuotasService.GetCuotasDetallesAsync(PrestamoId);
        ListaCuotas = await cuotasService.ListarCuotasAsync(c => c.CuotasDetalleId == CuotasDetalle.CuotasDetalleId);
    }

    public async Task Modificar()
    {
        var creado = await prestamosService.Guardar(Prestamo);

        var eliminarDetalleCuotas = await cuotasService.EliminarDetalleDeCuotas(CuotasDetalle.CuotasDetalleId);

        if (creado && eliminarDetalleCuotas)
        {
            await cuotasService.CrearDetalleCuotas(PrestamoId, CuotasDetalle.CuotasNo, Prestamo.Monto / CuotasDetalle.CuotasNo);
            // toastService.ShowSuccess("Se ha eliminado correctamente");
            navigationManager.NavigateTo("/Prestamo/Index");
        }
        else
        {
            // toastService.ShowError("No se ha podido eliminar correctamente");
        }
    }

    private async Task Eliminar()
    {
        var eliminarDetalleCuotas = await cuotasService.EliminarDetalleDeCuotas(CuotasDetalle.CuotasDetalleId);

        var eliminado = await prestamosService.Eliminar(Prestamo.PrestamoId);

        if (eliminado && eliminarDetalleCuotas)
        {
            // toastService.ShowSuccess("Se ha eliminado correctamente");
            navigationManager.NavigateTo("/Prestamo/Index");
        }
        else
        {
            // toastService.ShowError("No se ha podido eliminar correctamente");
        }
    }

    public async Task CrearCuotas()
    {
        ListaCuotas.Clear();
        double valor = Prestamo.Monto / CuotasDetalle.CuotasNo;
        DateTime Fecha = DateTime.Now;
        for (int i = 0; i < CuotasDetalle.CuotasNo; i++)
        {
            Cuotas cuota = new()
                {
                    CuotaNo = i + 1,
                    CuotasDetalleId = CuotasDetalle.CuotasDetalleId,
                    Valor = valor,
                    Fecha = Fecha.AddMonths(i)
                };

            ListaCuotas.Add(cuota);
        }
    }

}